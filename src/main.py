import logging
import openai
import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
openai_api_key = os.getenv("OPENAI_API_KEY")
telegram_api_token = os.getenv("TELEGRAM_API_TOKEN")
admin_user_id = os.getenv("ADMIN_USER_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not openai_api_key or not telegram_api_token or not admin_user_id:
    raise ValueError("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ OpenAI
openai.api_key = openai_api_key
ADMIN_USER_ID = int(admin_user_id)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ—Å—Ç—É–ø–æ–≤ (user_id -> –¥–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã)
user_access = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π (user_id -> —Å–æ–æ–±—â–µ–Ω–∏—è)
user_messages = {}

# FSM —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –±–æ—Ç
storage = MemoryStorage()
bot = Bot(token=telegram_api_token)
dp = Dispatcher(bot, storage=storage)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
SYSTEM_PROMPT = (
    "–í—ã ‚Äî –¥—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –º—É–¥—Ä—ã–π –∏ —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–π, –≥–ª—É–±–æ–∫–æ —Ä–∞–∑–±–∏—Ä–∞—é—â–∏–π—Å—è –≤ —Ä–µ–ª–∏–≥–∏–∏, —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. "
    "–ü–æ–º–æ–≥–∞–π—Ç–µ –ª—é–¥—è–º –∏–¥—Ç–∏ –ø–æ –ø—É—Ç–∏ –¥—É—à–∏ –º—è–≥–∫–æ, –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏–π, —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –æ–ø—ã—Ç—É."
)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
class AdminAccess(StatesGroup):
    waiting_for_duration = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
pending_user = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def has_access(user_id: int) -> bool:
    return user_id == ADMIN_USER_ID or (
        user_id in user_access and datetime.now() < user_access[user_id]
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
async def generate_response(user_id: int, user_message: str) -> str:
    try:
        if user_id not in user_messages:
            user_messages[user_id] = []
        user_messages[user_id].append({"role": "user", "content": user_message})

        # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        user_messages[user_id] = user_messages[user_id][-20:]

        messages = [{"role": "system", "content": SYSTEM_PROMPT}] + user_messages[user_id]

        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content.strip()
        user_messages[user_id].append({"role": "assistant", "content": reply})
        return reply
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ OpenAI:")
        return "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# /start —Ö–µ–Ω–¥–ª–µ—Ä
@dp.message_handler(commands=["start"])
async def start_handler(message: Message):
    user_id = message.from_user.id
    if not has_access(user_id):
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –î–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"approve:{user_id}"),
            InlineKeyboardButton("‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny:{user_id}")
        )
        await bot.send_message(ADMIN_USER_ID, f"üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç @{message.from_user.username or user_id} (ID: {user_id})", reply_markup=keyboard)
        await message.answer("üßò‚Äç‚ôÇÔ∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ù–∞—Å—Ç–∞–≤–Ω–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è üôè")
    else:
        await message.answer("‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –î—É—à–∏. –°–ø—Ä–∞—à–∏–≤–∞–π –æ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–º, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å üôè")

# –ö–Ω–æ–ø–∫–∞ "–î–∞—Ç—å –¥–æ—Å—Ç—É–ø"
@dp.callback_query_handler(lambda c: c.data.startswith("approve:"))
async def approve_user(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    pending_user[callback.from_user.id] = user_id
    await callback.message.answer("‚è≥ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø?")
    await state.set_state(AdminAccess.waiting_for_duration)

# –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data.startswith("deny:"))
async def deny_user(callback: types.CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await bot.send_message(user_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.message.answer(f"‚õî –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

# –í–≤–æ–¥ –¥–Ω–µ–π –æ—Ç –∞–¥–º–∏–Ω–∞
@dp.message_handler(state=AdminAccess.waiting_for_duration)
async def set_duration(message: Message, state: FSMContext):
    try:
        days = int(message.text.strip())
        admin_id = message.from_user.id
        if admin_id not in pending_user:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return
        uid = pending_user.pop(admin_id)
        expires = datetime.now() + timedelta(days=days)
        user_access[uid] = expires
        await bot.send_message(uid, f"‚úÖ –¢–µ–±–µ –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –¥–æ {expires.strftime('%Y-%m-%d')}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è {uid} –≤—ã–¥–∞–Ω –¥–æ {expires.strftime('%Y-%m-%d')}")
        await state.finish()
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–π.")

# –°–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler()
async def message_handler(message: Message):
    user_id = message.from_user.id
    if not has_access(user_id):
        await message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    response = await generate_response(user_id, message.text)
    await message.answer(response)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.info("üîÆ –ó–∞–ø—É—Å–∫ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –î—É—à–∏...")
    executor.start_polling(dp, skip_updates=True)
